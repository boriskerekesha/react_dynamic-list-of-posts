{"version":3,"sources":["components/PostsList.tsx","components/Loader/Loader.tsx","utils/fetchClient.ts","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","userPosts","setIsSideBar","isSideBar","currentPost","setCurrentPost","setHasCommentForm","length","className","map","post","id","title","type","classNames","onClick","postItem","currentIsSideBar","handleClick","Loader","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","Error","json","client","NewCommentForm","postId","setComments","handleError","useState","nameValue","setNameValue","emailValue","setEmailValue","textAreaValue","setTextAreaValue","isClickSubmit","setIsClickSubmit","isLoading","setIsLoading","isValidEmail","test","isDangerName","isDangerEmail","isDangerTextArea","htmlFor","value","name","placeholder","onChange","e","currentTarget","preventDefault","reset","email","comment","currentComments","catch","PostDetails","hasCommentForm","comments","hasError","setHasError","hasComments","setHasComments","useEffect","commentsItems","isTitle","isWriteCommentButton","href","commentItem","filter","UserSelector","users","selectedUser","setSelectedUser","isDropDown","setIsDropDown","currentDropDown","role","user","handleClickUser","App","setUsers","setUserPosts","isNoPosts","setIsNoPosts","usersItems","posts","finally","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f4b893c0.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { Post } from '../types/Post';\n\ntype Props = {\n  userPosts: Post[];\n  setIsSideBar: React.Dispatch<React.SetStateAction<boolean>>,\n  isSideBar: boolean,\n  currentPost: Post | null,\n  setCurrentPost: React.Dispatch<React.SetStateAction<Post | null>>,\n  setHasCommentForm: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  userPosts,\n  setIsSideBar,\n  isSideBar,\n  currentPost,\n  setCurrentPost,\n  setHasCommentForm,\n}) => {\n  if (userPosts.length === 0) {\n    return null;\n  }\n\n  const handleClick = (\n    postItem: Post,\n  ) => {\n    if (postItem.id === currentPost?.id) {\n      setIsSideBar(false);\n      setCurrentPost(null);\n\n      return;\n    }\n\n    setCurrentPost(postItem);\n    setHasCommentForm(false);\n    setIsSideBar(currentIsSideBar => (\n      !isSideBar ? !isSideBar : currentIsSideBar));\n  };\n\n  return (\n    <div data-cy=\"PostsList\">\n      <p className=\"title\">Posts:</p>\n\n      <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n        <thead>\n          <tr className=\"has-background-link-light\">\n            <th>#</th>\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {userPosts.map(post => (\n            <tr\n              key={post.id}\n              data-cy=\"Post\"\n            >\n              <td data-cy=\"PostId\">\n                {post.id}\n              </td>\n              <td data-cy=\"PostTitle\">\n                {post.title}\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  type=\"button\"\n                  data-cy=\"PostButton\"\n                  className={classNames(\n                    'button',\n                    'is-link',\n                    { 'is-light': post.id !== currentPost?.id },\n                  )}\n                  onClick={() => handleClick(post)}\n                >\n                  {post.id === currentPost?.id ? 'Close' : 'Open'}\n                </button>\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","/* eslint-disable  @typescript-eslint/no-explicit-any */\nconst BASE_URL = 'https://mate.academy/students-api';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null,\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  postId: number,\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>,\n  handleError: () => void\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  postId,\n  setComments,\n  handleError,\n}) => {\n  const [nameValue, setNameValue] = useState('');\n  const [emailValue, setEmailValue] = useState('');\n  const [textAreaValue, setTextAreaValue] = useState('');\n  const [isClickSubmit, setIsClickSubmit] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  /* eslint-disable-next-line max-len */\n  const emailRegExp = /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/;\n  let isValidEmail = emailRegExp.test(emailValue);\n\n  const handleChangeTextArea = (\n    e: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => setTextAreaValue(e.currentTarget.value);\n\n  const handleChangeEmail = (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => setEmailValue(e.currentTarget.value);\n\n  const handleChangeName = (\n    e: React.ChangeEvent<HTMLInputElement>,\n  ) => setNameValue(e.currentTarget.value);\n\n  const handleClickAddComment = (\n    e: React.MouseEvent<HTMLButtonElement, MouseEvent>,\n  ) => {\n    e.preventDefault();\n    setIsClickSubmit(true);\n\n    if (!nameValue || !isValidEmail || !textAreaValue) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    const reset = () => {\n      setTextAreaValue('');\n      setIsClickSubmit(false);\n      setIsLoading(false);\n    };\n\n    client.post<Comment>(\n      '/comments',\n      {\n        postId,\n        name: nameValue,\n        email: emailValue,\n        body: textAreaValue,\n      },\n    )\n      .then(comment => {\n        setComments(currentComments => [\n          ...currentComments,\n          comment,\n        ]);\n        reset();\n      })\n      .catch(() => {\n        handleError();\n        reset();\n      });\n  };\n\n  const handleClickClear = () => {\n    setIsClickSubmit(false);\n    setNameValue('');\n    setEmailValue('');\n    setTextAreaValue('');\n    isValidEmail = true;\n  };\n\n  const isDangerName = isClickSubmit && !nameValue;\n  const isDangerEmail = isClickSubmit && !isValidEmail;\n  const isDangerTextArea = isClickSubmit && !textAreaValue;\n\n  return (\n    <form data-cy=\"NewCommentForm\">\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={nameValue}\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames(\n              'input',\n              { 'is-danger': isDangerName },\n            )}\n            onChange={handleChangeName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {isDangerName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isDangerName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            value={emailValue}\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames(\n              'input',\n              { 'is-danger': isDangerEmail },\n            )}\n            onChange={handleChangeEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {isDangerEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {isDangerEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            {!emailValue ? 'Email is required' : 'Example: \"Vova@ukr.net\"'}\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            value={textAreaValue}\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames(\n              'textarea',\n              { 'is-danger': isDangerTextArea },\n            )}\n            onChange={handleChangeTextArea}\n          />\n        </div>\n\n        {isDangerTextArea && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames(\n              'button is-link',\n              { 'is-loading': isLoading },\n            )}\n            onClick={handleClickAddComment}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClickClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { Post } from '../types/Post';\nimport { Comment } from '../types/Comment';\nimport { client } from '../utils/fetchClient';\n\ntype Props = {\n  currentPost: Post | null,\n  hasCommentForm: boolean,\n  setHasCommentForm: React.Dispatch<React.SetStateAction<boolean>>,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  currentPost,\n  hasCommentForm,\n  setHasCommentForm,\n}) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [hasComments, setHasComments] = useState(false);\n  const handleClickWriteButton = () => {\n    setHasCommentForm(true);\n  };\n\n  const handleError = () => {\n    setTimeout(() => setHasError(false), 3000);\n    setHasError(true);\n  };\n\n  useEffect(() => {\n    if (currentPost) {\n      setIsLoading(true);\n      setHasComments(false);\n\n      client.get<Comment[]>(`/comments?postId=${currentPost.id}`)\n        .then(commentsItems => {\n          setIsLoading(false);\n\n          if (!commentsItems.length) {\n            setHasComments(true);\n          }\n\n          setComments(commentsItems);\n        })\n        .catch(handleError);\n    }\n  }, [currentPost]);\n\n  if (!currentPost) {\n    return null;\n  }\n\n  const handleClickDelete = (commentItem: Comment) => {\n    setComments(currentComments => {\n      return currentComments.filter(comment => comment.id !== commentItem.id);\n    });\n\n    client.delete(`/comments/${commentItem.id}`)\n      .catch(() => {\n        handleError();\n        setTimeout(() => setComments((currentComments) => [\n          ...currentComments,\n          commentItem,\n        ]), 3000);\n      });\n  };\n\n  const { id, title, body } = currentPost;\n  const isTitle = !!comments.length && !isLoading;\n  const isWriteCommentButton = !isLoading && !hasCommentForm;\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${id}: ${title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading && (<Loader />)}\n          {hasError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {hasComments && (\n            <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n              No comments yet\n            </p>\n          )}\n\n          {isTitle && (\n            <p className=\"title is-4\">\n              Comments:\n            </p>\n          )}\n\n          {!isLoading && comments.map(comment => (\n            <article\n              className=\"message is-small\"\n              data-cy=\"Comment\"\n              key={comment.id}\n            >\n              <div className=\"message-header\">\n                <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                  {comment.name}\n                </a>\n                <button\n                  data-cy=\"CommentDelete\"\n                  type=\"button\"\n                  className=\"delete is-small\"\n                  aria-label=\"delete\"\n                  onClick={() => handleClickDelete(comment)}\n                >\n                  delete button\n                </button>\n              </div>\n\n              <div className=\"message-body\" data-cy=\"CommentBody\">\n                {comment.body}\n              </div>\n            </article>\n          ))}\n\n          {isWriteCommentButton && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={handleClickWriteButton}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {hasCommentForm && (\n          <NewCommentForm\n            postId={currentPost.id}\n            setComments={setComments}\n            handleError={handleError}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ntype Props = {\n  users: User[],\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  selectedUser,\n  setSelectedUser,\n}) => {\n  const [isDropDown, setIsDropDown] = useState(false);\n  const handleClickDropDown = () => {\n    setIsDropDown(currentDropDown => !currentDropDown);\n  };\n\n  const handleClickUser = (user: User) => {\n    setIsDropDown(false);\n\n    if (selectedUser === user) {\n      return;\n    }\n\n    setSelectedUser(user);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames(\n        'dropdown',\n        { 'is-active': isDropDown },\n      )}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={handleClickDropDown}\n        >\n          <span>\n            {selectedUser ? selectedUser.name : 'Choose a user'}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n        <div className=\"dropdown-content\">\n          {users.map(user => (\n            <a\n              key={user.id}\n              href={`#user-${user.id}`}\n              className=\"dropdown-item\"\n              onClick={() => handleClickUser(user)}\n            >\n              {user.name}\n            </a>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { Loader } from './components/Loader';\nimport { User } from './types/User';\nimport { client } from './utils/fetchClient';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [selectedUser, setSelectedUser] = useState<null | User>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [users, setUsers] = useState<User[]>([]);\n  const [userPosts, setUserPosts] = useState<Post[]>([]);\n  const [hasError, setHasError] = useState(false);\n  const [isNoPosts, setIsNoPosts] = useState(false);\n  const [isSideBar, setIsSideBar] = useState(false);\n  const [currentPost, setCurrentPost] = useState<Post | null>(null);\n  const [hasCommentForm, setHasCommentForm] = useState(false);\n\n  useEffect(() => {\n    client.get<User[]>('/users')\n      .then(usersItems => {\n        setUsers(usersItems);\n      })\n      .catch(() => setHasError(true));\n  }, []);\n\n  useEffect(() => {\n    if (selectedUser) {\n      setIsLoading(true);\n      setIsNoPosts(false);\n      setIsSideBar(false);\n\n      client.get<Post[]>(`/posts?userId=${selectedUser.id}`)\n        .then(posts => {\n          if (posts.length === 0) {\n            setIsNoPosts(true);\n          }\n\n          setUserPosts(posts);\n        })\n        .catch(() => setHasError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedUser]);\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  setSelectedUser={setSelectedUser}\n                  selectedUser={selectedUser}\n                />\n              </div>\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {isLoading && <Loader />}\n                {hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n                {isNoPosts && (\n                  <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n                    No posts yet\n                  </div>\n                )}\n                {!isLoading && (\n                  <PostsList\n                    isSideBar={isSideBar}\n                    setIsSideBar={setIsSideBar}\n                    userPosts={userPosts}\n                    currentPost={currentPost}\n                    setCurrentPost={setCurrentPost}\n                    setHasCommentForm={setHasCommentForm}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isSideBar },\n            )}\n          >\n            <div className=\"tile is-child box is-success \">\n              <PostDetails\n                currentPost={currentPost}\n                hasCommentForm={hasCommentForm}\n                setHasCommentForm={setHasCommentForm}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}